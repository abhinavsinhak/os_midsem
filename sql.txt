-- Branch Table
CREATE TABLE Branch (
    branch_id INT PRIMARY KEY,
    area_code INT,
    no_of_subscribers INT,
    address VARCHAR(255)
);

-- Subscriber Table
CREATE TABLE Subscriber (
    subscriber_id INT PRIMARY KEY,
    area_code INT,
    address VARCHAR(255),
    person_id INT,
    person_name VARCHAR(255), -- Add the person's name
    person_phone_no VARCHAR(15),
    person_type VARCHAR(255),
    FOREIGN KEY (area_code) REFERENCES Branch(area_code),
    FOREIGN KEY (person_id) REFERENCES Person(person_id)
);

-- Person Table
CREATE TABLE Person (
    person_id INT PRIMARY KEY,
    person_name VARCHAR(255), -- Add the person's name
    person_phone_no VARCHAR(15),
    person_type VARCHAR(255)
);

-- Call Detail Table
CREATE TABLE CallDetail (
    call_id INT PRIMARY KEY,
    call_type VARCHAR(255),
    callee_phone_no VARCHAR(15),
    caller_phone_no VARCHAR(15),
    call_date DATE,
    call_start_time TIME,
    call_end_time TIME,
    subscriber_id INT,
    FOREIGN KEY (subscriber_id) REFERENCES Subscriber(subscriber_id)
);

-- Bill Generation Table
CREATE TABLE BillGeneration (
    bill_no INT PRIMARY KEY,
    bill_amount DECIMAL(10, 2),
    subscriber_id INT,
    FOREIGN KEY (subscriber_id) REFERENCES Subscriber(subscriber_id)
);



DELIMITER //

CREATE FUNCTION GenerateBillForSubscriber(subscriber_name_param VARCHAR(255))
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total_cost DECIMAL(10, 2);

    -- Calculate the total cost based on call details (assuming cost_per_minute)
    SELECT SUM(TIMESTAMPDIFF(MINUTE, CallDetail.call_start_time, CallDetail.call_end_time) * cost_per_minute) 
    INTO total_cost
    FROM CallDetail
    JOIN Subscriber ON CallDetail.subscriber_id = Subscriber.subscriber_id
    JOIN Person ON Subscriber.person_id = Person.person_id
    WHERE Person.person_name = subscriber_name_param;

    RETURN total_cost;
END //

DELIMITER ;





    delimiter //
   CREATE PROCEDURE generate_address_list()
     BEGIN
         DECLARE done INT DEFAULT FALSE;
         DECLARE customer_name VARCHAR(255);
         DECLARE customer_address VARCHAR(255);
         DECLARE address_list TEXT DEFAULT '';
    
         DECLARE cur CURSOR FOR
         SELECT customer_name, customer_city FROM customer;
    
         DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
         OPEN cur;
    
         read_loop: LOOP
             FETCH cur INTO customer_name, customer_address;
             IF done THEN
                 LEAVE read_loop;
             END IF;
    
             SET address_list = CONCAT(address_list, customer_address, ', ');
         END LOOP;
    
         CLOSE cur;
    
         
    
         SELECT address_list AS customer_addresses;
     END; //
     delimiter ;


   delimiter //
     create procedure cust_list()
     begin
     declare done int default false;
     declare customer_name varchar(20);
    
     declare account_balance int ;
     declare cur cursor for
     select c.customer_name,a.balance from account a join depositor d on d.account_number = a.account_number 
      join customer c on c.customer_name = d.customer_name order by a.balance desc limit 3;

      declare continue handler for not found set done = true;

      open cur;

      read_loop: LOOP
       fetch cur into customer_name, account_balance;
       if done THEN
         leave read_loop;
        end if;
         select customer_name,account_balance;
        end LOOP;
      close cur;
      END;//
      delimiter ;

 