#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int pipefd[2]; // File descriptors for the pipe
    char buffer[100]; // Buffer for reading and writing data

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) { // Child process
        close(pipefd[1]); // Close the write end of the pipe (not needed)

        // Read data from the pipe
        ssize_t num_bytes = read(pipefd[0], buffer, sizeof(buffer));
        if (num_bytes == -1) {
            perror("read");
            exit(EXIT_FAILURE);
        }

        // Null-terminate the received data
        buffer[num_bytes] = '\0';

        printf("Child received: %s\n", buffer);

        // Close the read end of the pipe
        close(pipefd[0]);
    } else { // Parent process
        close(pipefd[0]); // Close the read end of the pipe (not needed)

        const char *data_to_send = "Hello, child!";
        
        // Write data to the pipe
        ssize_t num_bytes = write(pipefd[1], data_to_send, strlen(data_to_send));
        if (num_bytes == -1) {
            perror("write");
            exit(EXIT_FAILURE);
        }

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}
