#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>

int main() {
    // Define a unique key for the shared memory segment
    key_t key = ftok("my_shared_memory_key", 'R');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create or access the shared memory segment
    int shm_id = shmget(key, sizeof(int), IPC_CREAT | 0666);
    if (shm_id == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the process's address space
    int *shared_data = (int *)shmat(shm_id, NULL, 0);
    if (shared_data == (int *)(-1)) {
        perror("shmat");
        exit(1);
    }

    // Parent process writes a value to shared memory
    *shared_data = 42;

    // Fork a child process to read from shared memory
    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(1);
    }

    if (child_pid == 0) { // Child process
        // Read the value from shared memory
        int value = *shared_data;
        printf("Child process read: %d\n", value);

        // Detach from shared memory
        if (shmdt(shared_data) == -1) {
            perror("shmdt");
            exit(1);
        }
    } else { // Parent process
        // Wait for the child process to finish
        wait(NULL);

        // Detach from shared memory
        if (shmdt(shared_data) == -1) {
            perror("shmdt");
            exit(1);
        }

        // Optionally, remove the shared memory segment
        if (shmctl(shm_id, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(1);
        }
    }

    return 0;
}
